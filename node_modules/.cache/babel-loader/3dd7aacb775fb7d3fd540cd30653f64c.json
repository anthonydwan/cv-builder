{"ast":null,"code":"var _jsxFileName = \"/home/anthony/the_odin_project/odin_CV_builder/cv-project/src/components/ViewRender.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ViewRender(props) {\n  const {\n    title,\n    sectionList,\n    subsectionList,\n    int,\n    detail\n  } = props;\n\n  const conditionalDate = key => {\n    const start = key.start.value;\n    const end = key.end.value;\n\n    if (start && start !== \"\" && end && end !== \"\") {\n      return \" to \";\n    } else {\n      return \"\";\n    }\n  };\n\n  const selectSubs = (list, key, subKey) => {\n    const primary = subKey.split(\"_\")[0];\n\n    if (primary === key) {\n      return renderDP(list, key, subKey);\n    }\n  };\n\n  const renderDP = (subsectionList, key, subKey) => {\n    // we find the number of dotpoints, if only one, use paragraph instead\n    const currSectionSubKeys = Object.keys(subsectionList).filter(sub => sub.split(\"_\")[0] === key);\n    const DPcount = currSectionSubKeys.length;\n\n    if (DPcount === 1) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"view--subsection\",\n        children: subsectionList[subKey].value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 14\n      }, this);\n    } else if (currSectionSubKeys.map(subkey => subsectionList[subkey].value === undefined || subsectionList[subkey].value === \"\").every(e => e === true)) {\n      return null;\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"view--subsection\",\n          children: subsectionList[subKey].value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  const conditionalHeading = sectionList => {\n    if (sectionList.map(key => sectionList[key][int].value === undefined || sectionList[key][int].value == \"\").some(e => e === false)) {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this);\n    } else {\n      return null;\n    }\n  };\n\n  const conditionalSection = key => {\n    if (sectionList[key][int].value !== undefined && sectionList[key][int].value !== \"\") {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"view--section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"view--titleBlock\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"view--section\",\n                children: sectionList[key][int].value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 17\n              }, this), \", \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"view--section\",\n                children: sectionList[key][detail].value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: [sectionList[key].start.value, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 17\n              }, this), conditionalDate(sectionList[key]), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [sectionList[key].end.value, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), Object.keys(subsectionList).map(subKey => selectSubs(subsectionList, key, subKey))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [conditionalHeading(sectionList), Object.keys(sectionList).map(key => conditionalSection(key))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ViewRender;\nexport default ViewRender;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewRender\");","map":{"version":3,"sources":["/home/anthony/the_odin_project/odin_CV_builder/cv-project/src/components/ViewRender.js"],"names":["React","ViewRender","props","title","sectionList","subsectionList","int","detail","conditionalDate","key","start","value","end","selectSubs","list","subKey","primary","split","renderDP","currSectionSubKeys","Object","keys","filter","sub","DPcount","length","map","subkey","undefined","every","e","conditionalHeading","some","conditionalSection"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nfunction ViewRender(props) {\n  const { title, sectionList, subsectionList, int, detail } = props;\n\n  const conditionalDate = (key) => {\n    const start = key.start.value;\n    const end = key.end.value;\n    if (start && start !== \"\" && end && end !== \"\") {\n      return \" to \";\n    } else {\n      return \"\";\n    }\n  };\n\n  const selectSubs = (list, key, subKey) => {\n    const primary = subKey.split(\"_\")[0];\n    if (primary === key) {\n      return renderDP(list, key, subKey);\n    }\n  };\n\n  const renderDP = (subsectionList, key, subKey) => {\n    // we find the number of dotpoints, if only one, use paragraph instead\n    const currSectionSubKeys = Object.keys(subsectionList).filter(\n      (sub) => sub.split(\"_\")[0] === key\n    );\n    const DPcount = currSectionSubKeys.length;\n    if (DPcount === 1) {\n      return <p className=\"view--subsection\">{subsectionList[subKey].value}</p>;\n    } else if (\n      currSectionSubKeys\n        .map(\n          (subkey) =>\n            subsectionList[subkey].value === undefined ||\n            subsectionList[subkey].value === \"\"\n        )\n        .every((e) => e === true)\n    ) {\n      return null;\n    } else {\n      return (\n        <ul>\n          <li className=\"view--subsection\">{subsectionList[subKey].value}</li>\n        </ul>\n      );\n    }\n  };\n\n  const conditionalHeading = (sectionList) => {\n    if (\n      sectionList.map(\n          (key) =>\n            sectionList[key][int].value === undefined ||\n            sectionList[key][int].value == \"\"\n        )\n        .some((e) => e === false)\n    ) {\n      return (\n        <React.Fragment>\n          <h2>{title}</h2>\n          <hr />\n        </React.Fragment>\n      );\n    } else {\n      return null;\n    }\n  };\n\n  const conditionalSection = (key) => {\n    if (\n      sectionList[key][int].value !== undefined &&\n      sectionList[key][int].value !== \"\"\n    ) {\n      return (\n        <React.Fragment>\n          <div className=\"view--section\">\n            <div className=\"view--titleBlock\">\n              <div>\n                <span className=\"view--section\">\n                  {sectionList[key][int].value}\n                </span>\n                {\", \"}\n                <span className=\"view--section\">\n                  {sectionList[key][detail].value}\n                </span>\n              </div>\n              <div>\n                <span>{sectionList[key].start.value} </span>\n                {conditionalDate(sectionList[key])}\n                <span>{sectionList[key].end.value} </span>\n              </div>\n            </div>\n            {Object.keys(subsectionList).map((subKey) =>\n              selectSubs(subsectionList, key, subKey)\n            )}\n          </div>\n        </React.Fragment>\n      );\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {conditionalHeading(sectionList)}\n      {Object.keys(sectionList).map((key) => conditionalSection(key))}\n    </React.Fragment>\n  );\n}\n\nexport default ViewRender;\n"]},"metadata":{},"sourceType":"module"}